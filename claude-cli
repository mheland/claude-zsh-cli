#!/bin/zsh

CONFIG_FILE="$HOME/.config/claude-cli/config"
CONFIG_DIR=$(dirname "$CONFIG_FILE")
DEBUG=${DEBUG:-0}

debug() {
    if [ "$DEBUG" -eq 1 ]; then
        echo "[DEBUG] $1" >&2
    fi
}

# Create config if needed
if [ ! -d "$CONFIG_DIR" ]; then
    mkdir -p "$CONFIG_DIR"
fi

if [ ! -f "$CONFIG_FILE" ]; then
    echo "Claude CLI Setup"
    echo "---------------"
    echo "Please enter your Anthropic API key:"
    read -rs API_KEY
    echo "ANTHROPIC_API_KEY=$API_KEY" > "$CONFIG_FILE"
    chmod 600 "$CONFIG_FILE"
    echo "\nConfiguration saved!"
fi

source "$CONFIG_FILE"

handle_special_chars() {
    setopt LOCAL_OPTIONS NO_NOMATCH NO_GLOB
    echo "$*"
}

format_content() {
    local content="$1"
    local BLUE='\033[0;34m'
    local GREEN='\033[0;32m'
    local YELLOW='\033[1;33m'
    local CYAN='\033[0;36m'
    local BOLD='\033[1m'
    local NC='\033[0m'
    
    # Process content line by line
    # Use printf to ensure proper handling of special characters
    printf '%s\n' "$content" | while IFS= read -r line || [ -n "$line" ]; do
        # Code blocks with --- delimiter
        if [[ "$line" == "---"* ]]; then
            if [ -z "$in_code_block" ]; then
                in_code_block=1
                echo "${CYAN}────────────────────────────────────────────${NC}"
                continue
            else
                in_code_block=
                echo "${CYAN}────────────────────────────────────────────${NC}"
                echo
                continue
            fi
        fi
        
        if [ -n "$in_code_block" ]; then
            line=$(echo "$line" | sed 's/\\"/"/g' | sed 's/[\\]\?(/\\(/g' | sed 's/[\\]\?)/\\)/g')
            echo "${CYAN}$line${NC}"
            continue
        fi

        # Handle bullet points with command options
        if [[ "$line" =~ ^[[:space:]]*[-•][[:space:]]*\`?-[a-zA-Z0-9:][^:\`]*\`?:[[:space:]] ]]; then
            local option=$(echo "$line" | sed 's/^[[:space:]]*[-•][[:space:]]*`\?\(-[^:`]*\)`\?:[[:space:]]*.*$/\1/')
            local explanation=$(echo "$line" | sed 's/^[[:space:]]*[-•][[:space:]]*`\?-[^:`]*`\?:[[:space:]]*\(.*\)$/\1/')
            echo "${YELLOW}•${NC} ${CYAN}${option}${NC}: ${explanation}"
        elif [[ "$line" =~ ^[[:space:]]*[-•][[:space:]] ]]; then
            line=$(echo "$line" | sed "s/\`//g")
            echo "${YELLOW}•${NC}${line#[•-]}"
        else
            # Handle inline code and filenames
            while [[ "$line" =~ ([^\`]*)\`([^\`]+)\`(.*) ]]; do
                before="${BASH_REMATCH[1]}"
                code="${BASH_REMATCH[2]}"
                after="${BASH_REMATCH[3]}"
                line="${before}${CYAN}${code}${NC}${after}"
            done
            echo "$line"
        fi
    done <<< "$content"
}

query_claude() {
    local prompt="$1"
    debug "Making API call with prompt: $prompt"
    
    # Properly escape the prompt for JSON, handling control characters
    # Create JSON payload that requests shell-friendly format
    local system_prompt="Please format your responses for shell output. Use plain text without special formatting. For code blocks, use --- as delimiter instead of backticks. For lists, use simple dashes. Avoid any special characters or markdown."
    
    local json_payload
    json_payload=$(jq -n \
        --arg prompt "$prompt" \
        --arg sysprompt "$system_prompt" \
        '{
            model: "claude-3-haiku-20240307",
            max_tokens: 1024,
            system: $sysprompt,
            messages: [
                {
                    role: "user",
                    content: $prompt
                }
            ]
        }')
    
    debug "JSON payload: $json_payload"
    
    local response=$(curl -s https://api.anthropic.com/v1/messages \
        -H "x-api-key: $ANTHROPIC_API_KEY" \
        -H "anthropic-version: 2023-06-01" \
        -H "content-type: application/json" \
        -d "$json_payload")
    
    debug "Raw API response: $response"
    
    # Extract content text directly from response using a simpler jq pattern
    local content
    content=$(printf '%s' "$response" | jq -r '.content[0].text' 2>/dev/null)
    
    if [ $? -ne 0 ] || [ -z "$content" ]; then
        debug "Failed to parse response with jq"
        content=$(printf '%s' "$response" | grep -o '"text":"[^"]*"' | head -1 | sed 's/"text":"\(.*\)"/\1/')
    fi
    
    if [ -n "$content" ]; then
        format_content "$content"
    else
        echo "Error: Could not parse response from Claude" >&2
        debug "Response parsing error. Response was: $response"
        return 1
    fi
}

# Main script logic
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Usage: claude-cli [OPTIONS] <prompt>"
    echo ""
    echo "Options:"
    echo "  --help, -h    Show this help message"
    echo "  --reset       Reset API key"
    echo "  --debug       Enable debug output"
    echo ""
    echo "Example:"
    echo "  claude-cli \"What is the capital of France?\""
    echo ""
    echo "Environment variables:"
    echo "  DEBUG=1       Enable debug output"
    exit 0
fi

if [ "$1" = "--reset" ]; then
    echo "Please enter your new Anthropic API key:"
    read -rs API_KEY
    echo "ANTHROPIC_API_KEY=$API_KEY" > "$CONFIG_FILE"
    chmod 600 "$CONFIG_FILE"
    echo "\nAPI key has been reset!"
    exit 0
fi

if [ "$1" = "--debug" ]; then
    DEBUG=1
    shift
fi

if [ $# -eq 0 ]; then
    echo "Error: Please provide a prompt" >&2
    echo "Use --help for usage information" >&2
    exit 1
fi

prompt=$(handle_special_chars "$@")
query_claude "$prompt"

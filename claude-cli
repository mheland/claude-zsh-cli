#!/bin/zsh

# Add the following to your ~/.zshrc:
#
# # AI CLI alias and completion with noglob to handle special characters
# alias @ai="noglob claude-cli"
# compdef _gnu_generic @ai
#
# Configuration file path
CONFIG_FILE="$HOME/.config/claude-cli/config"
CONFIG_DIR=$(dirname "$CONFIG_FILE")

# Debug mode flag
DEBUG=${DEBUG:-0}

# Debug function
debug() {
    if [ "$DEBUG" -eq 1 ]; then
        echo "[DEBUG] $1" >&2
    fi
}

# Check if config directory exists, if not create it
if [ ! -d "$CONFIG_DIR" ]; then
    mkdir -p "$CONFIG_DIR"
fi

# Check if config file exists, if not create it and prompt for API key
if [ ! -f "$CONFIG_FILE" ]; then
    echo "Claude CLI Setup"
    echo "---------------"
    echo "Please enter your Anthropic API key:"
    read -rs API_KEY
    echo "ANTHROPIC_API_KEY=$API_KEY" > "$CONFIG_FILE"
    chmod 600 "$CONFIG_FILE"  # Set restrictive permissions
    echo "\nConfiguration saved!"
fi

# Source the config file
source "$CONFIG_FILE"

# Function to handle shell special characters
handle_special_chars() {
    # Save current shell options
    local old_options=$-
    # Turn off error exit and glob
    set +e
    setopt LOCAL_OPTIONS NO_NOMATCH NO_GLOB
    local result="$*"
    # Restore old shell options
    set -${old_options}
    echo "$result"
}

# Function to format and display the content
format_content() {
    local content="$1"
    local BLUE='\033[0;34m'
    local GREEN='\033[0;32m'
    local YELLOW='\033[1;33m'
    local CYAN='\033[0;36m'
    local BOLD='\033[1m'
    local PURPLE='\033[0;35m'
    local NC='\033[0m'
    
    # Ensure content is properly decoded
    content=$(echo "$content" | sed 's/\\n/\n/g')
    
    # Process the content line by line
    echo "$content" | while IFS= read -r line || [ -n "$line" ]; do
        # Code block handling
        if [[ "$line" == '```'* ]]; then
            if [ -z "$in_code_block" ]; then
                in_code_block=1
                echo ""
                echo "${CYAN}┌────────────────────────────────────────────┐${NC}"
                continue
            else
                in_code_block=
                echo "${CYAN}└────────────────────────────────────────────┘${NC}"
                echo ""
                continue
            fi
        fi
        
        if [ -n "$in_code_block" ]; then
            # Remove escape sequences from code blocks and handle parentheses
            line=$(echo "$line" | sed 's/\\"/"/g' | sed 's/[\\]\?(/\\(/g' | sed 's/[\\]\?)/\\)/g')
            echo "$line"
            continue
        fi
        
        # Bullet points
        if [[ "$line" =~ ^[[:space:]]*-[[:space:]] ]]; then
            echo "${YELLOW}•${NC}${line#-}"
            continue
        fi
        
        # Notes and important sections
        if [[ "$line" =~ ^[[:space:]]*(Note|Important): ]]; then
            echo ""
            echo "${BLUE}${BOLD}${line}${NC}"
            echo ""
            continue
        fi
        
        # Inline code
        while [[ "$line" =~ ([^\`]*)\`([^\`]+)\`(.*) ]]; do
            echo -n "${BASH_REMATCH[1]}${CYAN}${BASH_REMATCH[2]}${NC}"
            line="${BASH_REMATCH[3]}"
        done
        if [ -n "$line" ]; then
            echo "$line"
        fi
    done
}

# Function to make API call to Claude
query_claude() {
    local prompt="$1"
    debug "Making API call with prompt: $prompt"
    
    # Escape the prompt for JSON
    local escaped_prompt=$(echo "$prompt" | sed 's/"/\\"/g')
    
    local json_payload="{
        \"model\": \"claude-3-haiku-20240307\",
        \"max_tokens\": 1024,
        \"messages\": [{
            \"role\": \"user\",
            \"content\": \"$escaped_prompt\"
        }]
    }"
    
    debug "JSON payload: $json_payload"
    
    local response=$(curl -s https://api.anthropic.com/v1/messages \
        -H "x-api-key: $ANTHROPIC_API_KEY" \
        -H "anthropic-version: 2023-06-01" \
        -H "content-type: application/json" \
        -d "$json_payload")
    
    debug "Raw API response: $response"
    
    # Extract the content using Python for more reliable JSON parsing
    local content
    content=$(python3 -c '
import json, sys
try:
    response = json.loads(sys.stdin.read())
    print(response["content"][0]["text"])
except Exception as e:
    print(f"Error parsing JSON: {str(e)}", file=sys.stderr)
    exit(1)
' <<< "$response" 2>/dev/null)

    if [ $? -eq 0 ] && [ -n "$content" ]; then
        format_content "$content"
    else
        # Fallback to grep if Python fails
        content=$(echo "$response" | grep -o '"text":"[^"]*"' | cut -d'"' -f4 | sed 's/\\n/\n/g')
        if [ -n "$content" ]; then
            format_content "$content"
        else
            echo "Error: Could not parse response from Claude" >&2
            return 1
        fi
    fi
}

# Main script logic
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "Usage: claude-cli [OPTIONS] <prompt>"
    echo ""
    echo "Options:"
    echo "  --help, -h    Show this help message"
    echo "  --reset       Reset API key"
    echo "  --debug       Enable debug output"
    echo ""
    echo "Example:"
    echo "  claude-cli \"What is the capital of France?\""
    echo ""
    echo "Environment variables:"
    echo "  DEBUG=1       Enable debug output"
    exit 0
fi

if [ "$1" = "--reset" ]; then
    echo "Please enter your new Anthropic API key:"
    read -rs API_KEY
    echo "ANTHROPIC_API_KEY=$API_KEY" > "$CONFIG_FILE"
    chmod 600 "$CONFIG_FILE"
    echo "\nAPI key has been reset!"
    exit 0
fi

if [ "$1" = "--debug" ]; then
    DEBUG=1
    shift
fi

if [ $# -eq 0 ]; then
    echo "Error: Please provide a prompt" >&2
    echo "Use --help for usage information" >&2
    exit 1
fi

# Combine all arguments into a single prompt and handle special characters
prompt=$(handle_special_chars "$@")

# Query Claude and print the response
query_claude "$prompt"
